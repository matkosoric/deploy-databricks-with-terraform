name: Infrastructure provisioning

on:
  push:
    branches:
      - 'main'

concurrency:
  infra_deployment

jobs:

  infra:
    name: Infrastructure provisioning
    runs-on: ubuntu-22.04
    env:
      ARM_CLIENT_ID: ${{ secrets.SERVICE_PRINCIPAL_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.SERVICE_PRINCIPAL_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
      ADMIN_USER_MAIL: ${{ secrets.ADMIN_USER_MAIL }}
    steps:

      - uses: actions/checkout@v2

      - uses: hashicorp/setup-terraform@v1

      - name: Infrastructure provisioning
        shell: bash
        run: >-

          cd terraform

          terraform init

          terraform apply -auto-approve
          -var="client_id=${ARM_CLIENT_ID}"
          -var="client_secret=${ARM_CLIENT_SECRET}"
          -var="tenant_id=${ARM_TENANT_ID}"
          -var="subscription_id=${ARM_SUBSCRIPTION_ID}"
          -var="admin_user=${ADMIN_USER_MAIL}"

          terraform output


  cleanup:
    needs: infra
    name: Infrastructure cleanup
    runs-on: ubuntu-22.04
    environment: CLEAN_UP
    env:
      ARM_CLIENT_ID: ${{ secrets.SERVICE_PRINCIPAL_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.SERVICE_PRINCIPAL_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
      ADMIN_USER_MAIL: ${{ secrets.ADMIN_USER_MAIL }}
    steps:

      - uses: actions/checkout@v2

      - uses: hashicorp/setup-terraform@v1

      - name: Decomissioning resources
        shell: bash
        run: >-

          cd terraform

          terraform init

          terraform destroy -auto-approve
          -var="client_id=${ARM_CLIENT_ID}"
          -var="client_secret=${ARM_CLIENT_SECRET}"
          -var="tenant_id=${ARM_TENANT_ID}"
          -var="subscription_id=${ARM_SUBSCRIPTION_ID}"
          -var="admin_user=${ADMIN_USER_MAIL}"
